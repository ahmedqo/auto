<?php

namespace App\Functions;

use App\Models\Alert;
use App\Models\Setting;
use Carbon\Carbon;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;

class Core
{
    public static $CURRENCY = 'MAD';
    public static $UNIT = 'MAD';

    public static function fillable($Class, $Request)
    {
        $data = [];

        foreach ((new $Class())->getFillable() as $key => $prop) {
            $data[$prop] = $Request->{$prop};
        }

        return $data;
    }
    public static function formatNumber($num)
    {
        $formattedNumber = number_format($num);
        if (strpos($formattedNumber, '.') === false) {
            $formattedNumber .= '.000';
        } else {
            list($integerPart, $decimalPart) = explode('.', $formattedNumber);
            switch (strlen($decimalPart)) {
                case 1:
                    $formattedNumber .= '00';
                    break;
                case 2:
                    $formattedNumber .= '0';
                    break;
            }
        }
        return $formattedNumber;
    }

    public static function matchRoute($str)
    {
        return Str::contains(request()->path(), $str);
    }

    public static function subString($str, $max = 157)
    {
        if (strlen($str) > $max) {
            $output = substr($str, 0, $max);
            return $output . '...';
        } else {
            return $str;
        }
    }

    public static function lang($lang = null)
    {
        return $lang ? app()->getLocale() == $lang : app()->getLocale();
    }

    public static function genderList()
    {
        return ['male', 'female'];
    }

    public static function statusList()
    {
        return ['available', 'not available'];
    }

    public static function periodList()
    {
        return ['week', 'month', 'year'];
    }

    public static function identityList()
    {
        return ['cin', 'visa', 'passport', 'residence permit'];
    }

    public static function orderList()
    {
        return  ['canceled', 'pendding', 'confirmed', 'completed'];
    }

    public static function rateList()
    {
        return  ['pendding', 'approved'];
    }

    public static function transmissionList()
    {
        return ['manual', 'automatic'];
    }

    public static function fuelList()
    {
        return ['gasoline', 'diesel'];
    }

    public static function promoteList()
    {
        return [[1, 'yes'], [0, 'no']];
    }

    public static function rate()
    {
        try {
            Core::$CURRENCY = Core::lang('en') ? '$' : 'â‚¬';
            return (float)(Core::lang('en') ? Core::getSetting('usd_rate') : Core::getSetting('eur_rate'));
        } catch (\Exception $e) {
            Core::$CURRENCY = 'MAD';
            return 1;
        }
    }

    public static function getSetting($name, $type = 'type')
    {
        return Setting::filterBy($name, $type);
    }

    public static function getDates($period = 'week')
    {
        switch (Core::getSetting('period')) {
            case "week":
                return [
                    Carbon::now()->startOfWeek(Carbon::SUNDAY),
                    Carbon::now()->endOfWeek(Carbon::SATURDAY),
                    [
                        __('Sunday') => 0,
                        __('Monday') => 0,
                        __('Tuesday') => 0,
                        __('Wednesday') => 0,
                        __('Thursday') => 0,
                        __('Friday') => 0,
                        __('Saturday') => 0
                    ]
                ];
            case "month":
                $month = Carbon::now()->format('m');
                $year = Carbon::now()->format('Y');
                $firstDay = mktime(0, 0, 0, $month, 1, $year);
                $daysInMonth = (int) date('t', $firstDay);
                $dayOfWeek = (int) date('w', $firstDay);
                $weekOffset = ($dayOfWeek === 0) ? 6 : $dayOfWeek - 1;
                $count = (int) ceil(($daysInMonth + $weekOffset) / 7);
                $weeks = [];
                for ($i = 1; $i <= $count; $i++) {
                    $weeks[__('Week') . ' ' . $i] = 0;
                }
                return [
                    Carbon::now()->startOfMonth(),
                    Carbon::now()->endOfMonth(),
                    $weeks
                ];
            case "year":
                return [
                    Carbon::now()->startOfYear(),
                    Carbon::now()->endOfYear(),
                    [
                        __('January') => 0,
                        __('February') => 0,
                        __('March') => 0,
                        __('April') => 0,
                        __('May') => 0,
                        __('June') => 0,
                        __('July') => 0,
                        __('August') => 0,
                        __('September') => 0,
                        __('October') => 0,
                        __('November') => 0,
                        __('December') => 0
                    ]
                ];
        }
    }

    public static function groupKey($model, $period = 'week')
    {
        switch (Core::getSetting('period')) {
            case 'week':
                return __($model->updated_at->format('l'));
            case 'month':
                return __('Week') . ' ' . Core::formatWeek($model->updated_at->format('Y-m-d'));
            case 'year':
                return __($model->updated_at->format('F'));
        }
    }

    public static function formatWeek($datestr)
    {
        $date = new \DateTime($datestr);
        $dayOfWeek = $date->format('N');
        $dayOfMonth = $date->format('j');
        $startDayOfWeek = (new \DateTime($date->format('Y-m-01')))->format('N');
        return (int) ceil(($dayOfMonth + $startDayOfWeek - $dayOfWeek) / 7);
    }

    public static function alerts($limit)
    {
        $now = Carbon::now();
        $alerts = Alert::with('Vehicle')->where(function ($query) use ($now) {
            $date = $now->copy()->dayOfWeekIso + 1;
            $query->where('recurrence', 'week')
                ->whereRaw("DAYOFWEEK(DATE_ADD(date, INTERVAL threshold HOUR)) >= ?", [$date])
                ->WhereRaw("DAYOFWEEK(DATE_SUB(date, INTERVAL threshold HOUR)) <= ?", [$date]);
        })
            ->orWhere(function ($query) use ($now) {
                $date = $now->copy()->format('d H:i:s');
                $query->where('recurrence', 'month')
                    ->whereRaw("DATE_FORMAT(DATE_ADD(date, INTERVAL threshold HOUR), '%d %H:%i:%s') >= ?", [$date])
                    ->WhereRaw("DATE_FORMAT(DATE_SUB(date, INTERVAL threshold HOUR), '%d %H:%i:%s') <= ?", [$date]);
            })
            ->orWhere(function ($query) use ($now) {
                $date = $now->copy()->format('m-d H:i:s');
                $query->where('recurrence', 'year')
                    ->whereRaw("DATE_FORMAT(DATE_ADD(date, INTERVAL threshold HOUR), '%m-%d %H:%i:%s') >= ?", [$date])
                    ->WhereRaw("DATE_FORMAT(DATE_SUB(date, INTERVAL threshold HOUR), '%m-%d %H:%i:%s') <= ?", [$date]);
            });

        if ($limit) $alerts = $alerts->limit($limit);

        return $alerts->orderBy('Date', 'ASC')->get();
    }

    public static function stateList()
    {
        return [
            'scrtach' => '#14B8A680',
            'broke' => '#7C3AED80',
        ];
    }

    public static function pathList()
    {
        return ["M2358 4750 c-73 -13 -153 -54 -211 -109 -68 -64 -97 -123 -99 -198 -5 -157 87 -274 255 -325 100 -30 248 -23 331 15 89 41 140 88 175 160 55 114 51 196 -15 294 -82 120 -274 192 -436 163z", "M6173 4750 c-99 -20 -212 -96 -258 -173 -71 -122 -45 -284 61 -377 53 -46 144 -86 225 -100 176 -30 387 68 446 208 25 58 22 197 -4 247 -26 50 -106 126 -163 155 -82 42 -211 59 -307 40z", "M1415 4491 c-66 -3 -125 -9 -131 -13 -6 -4 -22 -36 -34 -70 -27 -73 -41 -88 -87 -88 -39 0 -53 -21 -53 -79 0 -84 18 -102 134 -132 104 -27 108 -33 91 -149 -25 -155 -13 -140 -110 -140 -70 0 -85 -3 -85 -15 0 -49 113 -96 321 -135 250 -47 376 -89 739 -245 236 -102 318 -131 473 -170 78 -19 165 -41 192 -49 28 -7 88 -16 134 -19 l83 -5 -73 65 c-102 91 -311 305 -375 383 -71 88 -104 153 -104 204 0 61 61 123 155 159 130 50 217 137 315 313 68 124 83 164 65 183 -11 11 -17 11 -41 0 -21 -11 -35 -33 -62 -100 -65 -165 -192 -296 -330 -340 -145 -46 -334 -34 -442 28 -113 65 -235 228 -275 366 l-16 57 -182 -2 c-100 -1 -236 -4 -302 -7z m1092 -852 c17 -8 133 -102 258 -209 l225 -195 -50 -3 c-53 -3 -268 45 -410 92 -147 48 -579 245 -652 298 l-33 23 30 7 c55 13 596 2 632 -13z", "M1962 3612 c-8 -6 9 -17 50 -35 35 -14 135 -59 223 -100 181 -84 280 -121 446 -166 140 -37 209 -51 209 -41 0 9 -111 109 -276 248 l-121 102 -259 0 c-142 0 -265 -4 -272 -8z", "M3107 4448 c-41 -102 -117 -244 -161 -301 -54 -73 -118 -121 -247 -188 -55 -29 -105 -59 -111 -67 -20 -23 -11 -90 20 -155 37 -78 122 -174 304 -345 167 -156 227 -199 299 -212 28 -6 204 -13 390 -17 300 -5 339 -4 339 9 0 8 10 132 21 274 29 353 31 741 5 915 l-19 126 -300 6 c-165 4 -349 7 -409 7 l-109 0 -22 -52z m-187 -547 c15 -4 26 -15 28 -27 5 -37 -24 -49 -119 -49 -73 0 -91 3 -109 20 l-22 20 27 22 c22 20 37 23 98 22 40 -1 83 -4 97 -8z m1004 -348 c-11 -193 -23 -343 -29 -353 -4 -6 -129 -10 -340 -10 l-334 0 -47 25 c-26 14 -72 44 -101 67 -66 50 -216 207 -279 292 l-46 61 83 6 c46 3 312 6 591 7 l507 2 -5 -97z", "M2778 3883 c-48 -4 -62 -16 -32 -27 25 -10 172 -7 179 3 3 5 2 12 -2 14 -14 8 -97 14 -145 10z", "M2831 3611 c-22 -14 24 -76 164 -216 163 -164 161 -163 417 -175 286 -13 421 -13 441 3 13 9 19 40 27 152 5 77 10 164 10 193 l0 52 -522 0 c-297 0 -529 -4 -537 -9z", "M3980 4488 c0 -7 7 -44 14 -83 51 -247 54 -373 16 -775 -10 -113 -22 -254 -25 -315 -3 -60 -8 -121 -11 -134 l-5 -24 233 6 c128 4 281 13 341 21 133 19 185 40 638 263 l336 165 30 71 c55 128 58 147 57 357 -1 143 -5 215 -18 269 -18 80 -59 165 -85 177 -9 5 -355 10 -768 12 -624 3 -753 1 -753 -10z m375 -594 c42 -43 -20 -77 -124 -69 -75 7 -101 18 -101 45 0 25 44 38 137 39 54 1 76 -3 88 -15z m938 -251 c153 -6 157 -7 140 -25 -24 -26 -166 -105 -376 -209 -281 -138 -418 -192 -522 -203 -106 -11 -509 -26 -517 -18 -5 5 23 362 35 432 1 10 19 17 57 21 78 8 995 10 1183 2z", "M4192 3882 c-18 -4 -34 -11 -35 -17 -3 -14 173 -19 186 -6 6 6 9 12 6 15 -9 8 -125 14 -157 8z", "M4113 3613 c-12 -2 -24 -14 -27 -29 -6 -24 -36 -319 -36 -358 0 -18 7 -19 190 -12 240 9 354 26 477 72 185 68 643 301 643 326 0 8 -1206 9 -1247 1z", "M5588 4493 c-22 -6 -22 -7 1 -73 41 -117 56 -218 56 -385 0 -143 -3 -171 -29 -269 -15 -60 -30 -116 -34 -124 -4 -13 2 -14 39 -9 24 4 73 11 109 16 91 14 229 27 574 56 489 41 569 54 721 121 l40 17 -55 11 c-66 13 -66 17 -19 142 l31 81 161 6 c132 4 163 8 173 21 14 19 28 148 19 176 -4 12 -24 24 -59 34 -51 15 -54 18 -92 88 -53 99 -60 102 -243 93 l-148 -7 -17 -62 c-26 -92 -84 -194 -147 -257 -106 -106 -277 -167 -430 -155 -254 20 -424 160 -495 406 l-22 75 -58 2 c-33 0 -67 -1 -76 -4z m425 -610 c13 -8 8 -31 -9 -37 -52 -20 -114 5 -100 40 5 13 15 15 54 9 26 -4 50 -9 55 -12z", "M5935 3870 c-4 -6 5 -10 20 -10 15 0 24 4 20 10 -3 6 -12 10 -20 10 -8 0 -17 -4 -20 -10z", "M467 3363 c-29 -8 -51 -22 -58 -36 -18 -33 -18 -299 0 -320 11 -14 35 -17 157 -17 l144 0 11 28 c16 40 6 269 -12 286 -17 15 -114 55 -161 65 -21 5 -51 3 -81 -6z", "M227 3363 c-4 -3 -7 -451 -7 -995 l0 -988 44 0 c27 0 52 7 65 18 l22 17 -3 961 c-3 797 -5 964 -17 977 -13 17 -90 24 -104 10z", "M7868 3355 l-28 -16 5 -762 c7 -990 11 -1157 29 -1175 8 -8 34 -16 58 -19 l45 -5 6 987 c4 544 5 990 3 993 -13 13 -94 11 -118 -3z", "M82 3297 c-60 -19 -65 -38 -71 -246 -3 -102 -4 -496 -1 -875 l5 -690 45 -22 c25 -12 62 -25 84 -28 l38 -5 -5 907 c-3 514 -9 920 -14 937 -10 34 -30 39 -81 22z m38 -67 c23 -23 26 -70 9 -119 -11 -30 -14 -32 -53 -29 l-41 3 -3 62 c-2 52 1 66 18 83 25 25 45 25 70 0z m4 -1552 c23 -33 21 -113 -4 -138 -44 -44 -90 -8 -90 70 0 78 58 120 94 68z", "M55 3188 c-8 -53 8 -101 33 -96 14 3 17 14 17 68 0 59 -2 65 -22 68 -19 3 -22 -3 -28 -40z", "M64 1666 c-3 -7 -4 -38 -2 -67 3 -46 6 -54 23 -54 17 0 21 8 23 44 2 25 1 55 -3 68 -6 25 -32 31 -41 9z", "M7576 3297 c-12 -9 -17 -20 -13 -31 6 -14 21 -16 119 -14 l113 3 0 25 c0 25 -1 25 -100 28 -73 2 -105 -1 -119 -11z", "M8022 2374 l3 -939 35 3 c19 2 55 13 80 25 l45 22 3 886 2 886 -51 23 c-29 12 -67 24 -85 27 l-34 6 2 -939z m117 850 c30 -38 29 -117 -1 -138 -30 -21 -44 -20 -68 4 -32 32 -24 127 14 152 20 13 34 9 55 -18z m0 -1550 c23 -29 28 -92 11 -125 -8 -14 -21 -19 -49 -19 -44 0 -51 12 -51 88 0 29 6 48 20 62 27 27 44 25 69 -6z", "M8082 3158 c3 -55 5 -63 23 -63 17 0 21 9 26 50 7 63 3 75 -28 75 -23 0 -24 -2 -21 -62z", "M8082 1608 c2 -52 6 -63 22 -66 24 -5 36 14 36 60 0 52 -9 68 -37 68 -23 0 -24 -2 -21 -62z", "M5810 3231 c-248 -7 -236 1 -170 -111 34 -58 57 -105 131 -268 18 -40 19 -69 19 -475 l0 -432 -96 -192 c-54 -106 -94 -196 -90 -200 4 -5 352 -8 774 -8 l766 0 22 146 c13 80 35 195 50 255 28 108 28 112 29 434 0 289 -2 331 -18 383 -11 31 -34 145 -51 253 -18 107 -38 200 -43 205 -12 12 -992 19 -1323 10z", "M1136 3212 c-3 -5 -18 -78 -33 -163 l-28 -154 0 -525 0 -525 27 -125 c14 -69 31 -137 37 -152 l11 -28 239 0 c131 0 252 3 269 6 l30 6 -43 84 c-95 185 -89 142 -93 720 l-3 511 32 99 c17 54 46 131 64 171 33 71 33 71 11 77 -33 9 -514 7 -520 -2z", "M1685 3176 c-35 -60 -70 -151 -94 -248 -20 -77 -21 -109 -21 -557 0 -277 5 -495 10 -521 14 -63 76 -207 109 -255 27 -39 28 -40 85 -38 67 2 344 45 746 114 327 56 311 48 351 170 24 74 24 74 24 534 l0 460 -30 100 -30 100 -50 12 c-79 20 -1000 173 -1039 173 -31 0 -38 -5 -61 -44z m445 -61 c150 -8 286 -30 467 -75 209 -51 210 -51 223 -97 21 -71 34 -534 22 -806 -12 -279 -24 -345 -66 -365 -34 -15 -329 -80 -446 -98 -52 -8 -174 -17 -271 -21 l-176 -6 -6 24 c-9 31 -9 1387 -1 1428 l7 32 71 -5 c39 -3 118 -8 176 -11z", "M1950 3090 l-35 -5 -6 -120 c-4 -66 -7 -385 -8 -709 l-1 -588 113 6 c225 14 551 65 704 111 52 15 53 17 70 73 16 51 18 106 18 527 0 362 -3 482 -14 523 -13 51 -14 52 -65 67 -260 75 -653 133 -776 115z", "M5405 3194 c-382 -92 -485 -119 -530 -134 -58 -20 -54 13 -36 -277 13 -225 14 -688 1 -823 -5 -52 -12 -127 -16 -166 l-7 -72 54 -15 c49 -14 556 -135 637 -152 30 -6 33 -4 48 32 55 130 78 447 71 978 -4 334 -5 356 -31 474 -29 136 -48 181 -74 180 -9 0 -62 -11 -117 -25z", "M7560 3105 l0 -115 120 0 120 0 0 115 0 115 -120 0 -120 0 0 -115z", "M5635 3062 c22 -105 26 -197 31 -702 6 -544 5 -556 -15 -614 -12 -33 -19 -61 -16 -64 2 -3 33 53 67 124 l63 129 6 220 c8 255 -4 652 -21 709 -13 44 -94 205 -111 221 -8 7 -9 0 -4 -23z", "M2960 3021 c-30 -3 -55 -10 -55 -16 0 -5 7 -55 15 -110 23 -152 20 -948 -3 -1060 -12 -55 -14 -82 -6 -90 7 -7 310 -11 933 -13 l923 -3 13 48 c27 108 33 968 8 1166 l-11 87 -881 -2 c-485 -1 -906 -4 -936 -7z m1492 -239 c20 -13 47 -40 60 -60 23 -36 23 -42 23 -322 0 -210 -3 -295 -13 -322 -17 -47 -70 -94 -124 -109 -51 -14 -319 -7 -359 9 -45 18 -88 73 -100 127 -7 32 -9 148 -7 320 3 265 3 271 27 303 13 18 40 44 60 57 35 24 40 25 216 22 168 -2 182 -4 217 -25z", "M4024 2771 c-67 -49 -69 -58 -69 -396 l0 -300 33 -36 c44 -49 99 -63 242 -63 137 0 199 15 246 60 l35 32 -3 315 c-3 301 -4 317 -24 344 -39 54 -79 65 -257 69 l-162 5 -41 -30z", "M7560 2901 c0 -56 4 -74 23 -97 22 -28 22 -29 22 -429 0 -396 0 -400 -22 -440 -15 -25 -23 -56 -23 -87 l0 -48 115 0 c112 0 116 1 124 23 5 13 7 269 4 585 l-6 562 -119 0 -118 0 0 -69z", "M390 2608 c0 -194 3 -451 7 -570 l6 -218 157 0 157 0 6 368 c4 202 7 458 7 570 l0 202 -170 0 -170 0 0 -352z", "M463 1781 c-28 -4 -55 -10 -60 -15 -4 -4 -9 -83 -11 -174 l-3 -167 53 -23 c29 -12 65 -22 80 -22 15 0 64 19 110 43 l83 42 9 118 c11 141 3 188 -34 198 -31 9 -157 8 -227 0z", "M7566 1749 c-3 -17 -6 -71 -6 -120 l0 -89 125 0 125 0 0 104 c0 136 0 136 -134 136 l-103 0 -7 -31z", "M3300 1600 c-123 -10 -158 -23 -232 -84 -104 -87 -377 -355 -423 -418 -30 -40 -48 -78 -60 -128 -21 -87 -23 -85 110 -155 116 -62 161 -93 217 -149 48 -49 128 -186 184 -313 18 -43 38 -78 44 -77 5 1 189 2 408 3 l399 1 19 123 c26 169 25 527 -4 896 -12 151 -22 283 -22 293 0 17 -16 18 -277 17 -153 -1 -316 -5 -363 -9z m594 -37 c10 -33 25 -198 28 -318 l3 -120 -579 3 c-319 1 -581 4 -584 6 -24 25 299 371 385 412 54 25 144 31 455 33 265 1 287 0 292 -16z m-1018 -633 c46 0 63 -4 68 -15 9 -23 -4 -45 -27 -45 -20 0 -20 1 -2 13 34 26 8 37 -85 37 -54 0 -91 -4 -96 -11 -11 -19 18 -29 86 -30 l65 -1 -42 -10 c-23 -6 -62 -7 -88 -4 -43 7 -46 9 -43 34 2 21 10 28 33 33 17 4 39 5 50 3 11 -2 48 -4 81 -4z", "M3300 1541 c-132 -9 -168 -28 -310 -171 -117 -117 -179 -195 -166 -208 4 -4 246 -8 538 -10 l531 -3 -7 133 c-11 230 -15 255 -40 262 -26 7 -418 5 -546 -3z", "M3991 1602 c-17 -12 -11 -123 26 -522 28 -310 27 -431 -7 -620 -11 -63 -23 -132 -26 -153 l-7 -37 767 0 766 0 24 48 c39 77 56 150 66 282 13 169 0 356 -30 435 -40 106 -78 134 -427 308 -432 215 -457 225 -623 243 -175 18 -511 29 -529 16z m474 -32 c61 -5 142 -19 180 -30 182 -56 680 -302 771 -380 l31 -27 -276 -6 c-489 -12 -1111 -9 -1116 6 -2 6 -12 104 -22 216 -19 206 -18 222 17 234 18 7 265 -1 415 -13z m-125 -639 c18 -5 25 -14 25 -31 0 -30 -24 -38 -117 -39 -85 -1 -121 11 -116 41 2 14 13 25 28 29 32 9 148 9 180 0z", "M4062 1551 c-11 -7 -10 -40 3 -187 9 -98 18 -187 21 -196 5 -17 42 -18 602 -17 328 0 615 4 637 8 l40 7 -35 23 c-57 36 -487 246 -585 284 -107 42 -199 62 -355 76 -137 13 -310 14 -328 2z", "M4157 914 c-4 -4 -7 -14 -7 -21 0 -11 19 -13 93 -11 74 2 92 6 92 18 0 12 -17 16 -85 18 -47 1 -89 0 -93 -4z", "M2875 1564 c-22 -9 -93 -26 -157 -40 -155 -32 -268 -73 -576 -205 -329 -141 -391 -162 -627 -209 -226 -46 -315 -73 -351 -107 -40 -37 -27 -48 63 -51 59 -2 83 -7 87 -17 10 -26 29 -222 23 -237 -3 -9 -35 -23 -74 -32 -98 -25 -141 -52 -153 -96 -19 -71 -3 -93 99 -140 8 -3 23 -32 34 -63 29 -87 27 -87 362 -94 l284 -6 10 24 c5 13 16 44 25 69 45 129 175 284 281 338 140 70 342 68 489 -4 115 -56 218 -178 273 -323 31 -84 38 -91 80 -91 31 0 34 2 28 23 -22 72 -113 236 -182 327 -44 58 -138 123 -215 149 -86 29 -148 94 -148 154 0 95 96 221 368 484 l167 162 -75 0 c-41 0 -93 -7 -115 -15z m109 -23 c3 -5 -17 -28 -45 -52 -28 -23 -114 -98 -192 -166 -203 -177 -232 -196 -320 -205 -91 -9 -430 -10 -519 -2 -40 4 -65 11 -61 17 9 15 414 212 527 255 124 49 268 93 406 126 156 37 195 42 204 27z m-986 -588 c12 -10 24 -30 28 -45 9 -41 -41 -88 -93 -88 -36 0 -78 20 -95 44 -15 22 -7 54 18 80 21 21 36 26 74 26 31 0 55 -6 68 -17z", "M2855 1505 c-5 -2 -80 -22 -165 -45 -85 -23 -195 -57 -245 -76 -113 -44 -475 -214 -475 -224 0 -4 111 -10 248 -13 l247 -6 52 35 c28 20 76 56 105 82 30 26 96 83 147 127 115 100 144 140 86 120z", "M1871 933 c-57 -71 48 -141 112 -75 34 35 34 55 1 81 -38 30 -87 28 -113 -6z", "M7577 1504 c-14 -15 -6 -34 21 -48 34 -17 141 -30 182 -21 28 6 31 10 28 38 l-3 32 -111 3 c-60 1 -113 -1 -117 -4z", "M5580 1131 c0 -4 9 -34 20 -67 67 -194 65 -470 -5 -692 -15 -46 -25 -86 -23 -88 2 -2 36 -6 75 -10 l70 -7 26 84 c81 257 273 400 537 400 159 0 309 -59 399 -156 51 -57 109 -165 137 -257 l18 -57 168 -3 168 -3 32 58 c18 31 41 70 50 86 12 22 27 31 56 36 72 12 77 20 64 115 -6 51 -16 89 -26 99 -14 13 -45 17 -171 19 l-154 4 -31 86 c-44 122 -44 125 7 132 24 4 45 9 49 12 9 10 -41 33 -132 61 -120 38 -261 55 -794 97 -217 17 -397 36 -512 55 -16 2 -28 1 -28 -4z m436 -213 c8 -27 -18 -48 -61 -48 -52 0 -76 42 -32 60 12 5 36 9 54 9 24 1 33 -4 39 -21z", "M5940 900 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z", "M2324 661 c-92 -23 -221 -121 -255 -196 -26 -55 -25 -185 0 -240 23 -51 112 -135 182 -171 50 -26 64 -29 187 -32 133 -4 134 -4 197 27 81 40 158 112 187 176 26 58 30 155 8 220 -28 85 -147 180 -265 211 -53 15 -189 17 -241 5z", "M6135 657 c-107 -36 -190 -101 -229 -179 -21 -42 -26 -66 -26 -127 0 -111 13 -146 78 -211 71 -70 144 -107 242 -120 196 -27 371 53 438 199 35 75 36 184 3 253 -30 62 -97 122 -178 160 -58 27 -77 31 -176 34 -76 3 -125 0 -152 -9z"];
    }
}
